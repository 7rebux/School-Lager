@typeparam TItem

<div class="col-12">
<div class="d-flex justify-content-center">
  <nav>
    <ul class="pagination">
      @if (_currentPage > 0)
      {
        <li class="page-item">
          <a class="page-link" @onclick="() => SetPage(_currentPage - 1)">
            <i class="fa fa-angle-left" aria-hidden="true"></i>
            <span class="sr-only">Previous</span>
          </a>
        </li>
        if (_currentPage > 2)
        {
          <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(1)">1</a></li>
          <li class="page-item ellipsis"></li>
        }
        <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(_currentPage - 1)">@(_currentPage - 1)</a></li>
      }
      <li class="page-item active" aria-current="page">
        <a class="page-link" tabindex="-1" @onclick="() => SetPage(_currentPage)">@_currentPage</a>
      </li>
      @if (_currentPage < MaxPage)
      {
        <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(_currentPage + 1)">@(_currentPage + 1)</a></li>
        if (_currentPage + 2 < MaxPage)
        {
          <li class="page-item ellipsis"></li>
          <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(MaxPage)">@MaxPage</a></li>
        }
        <li class="page-item">
          <a class="page-link" @onclick="() => SetPage(_currentPage + 1)">
            <i class="fa fa-angle-right" aria-hidden="true"></i>
            <span class="sr-only">Next</span>
          </a>
        </li>
      }
    </ul>
  </nav>
</div>
</div>

@for (int i = 0; i < ElementsPerPage; i++)
{
  var index = _currentPage * ElementsPerPage + i;
  if (index >= Items.Count) break;
  var item = Items[index];
  @ItemTemplate(item)
}

<div class="col-12">
<div class="d-flex justify-content-center">
  <nav>
    <ul class="pagination">
      @if (_currentPage > 0)
      {
        <li class="page-item">
          <a class="page-link" @onclick="() => SetPage(_currentPage - 1)">
            <i class="fa fa-angle-left" aria-hidden="true"></i>
            <span class="sr-only">Previous</span>
          </a>
        </li>
        if (_currentPage > 2)
        {
          <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(1)">1</a></li>
          <li class="page-item ellipsis"></li>
        }
        <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(_currentPage - 1)">@(_currentPage - 1)</a></li>
      }
      <li class="page-item active" aria-current="page">
        <a class="page-link" tabindex="-1" @onclick="() => SetPage(_currentPage)">@_currentPage</a>
      </li>
      @if (_currentPage < MaxPage)
      {
        <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(_currentPage + 1)">@(_currentPage + 1)</a></li>
        if (_currentPage + 2 < MaxPage)
        {
          <li class="page-item ellipsis"></li>
          <li class="page-item"><a class="page-link noselect" @onclick="() => SetPage(MaxPage)">@MaxPage</a></li>
        }
        <li class="page-item">
          <a class="page-link" @onclick="() => SetPage(_currentPage + 1)">
            <i class="fa fa-angle-right" aria-hidden="true"></i>
            <span class="sr-only">Next</span>
          </a>
        </li>
      }
    </ul>
  </nav>
</div>
</div>

@code {

  private int MaxPage => Items.Count / ElementsPerPage;

    private void SetPage(int page)
    {
      _currentPage = page;
      StateHasChanged();
    }
    
    [Parameter]
    public int ElementsPerPage { get; set; } = 50;
    
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }
    
    [Parameter] 
    public IReadOnlyList<TItem> Items { get; set; }

    private int _currentPage = 0;
}